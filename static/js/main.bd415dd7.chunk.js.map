{"version":3,"sources":["redux/phonebook/phonebook-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","phone","payload","id","uuidv4","deleteContact","changeFilter","INITIAL_STATE","ContactForm","contacts","onAddContact","useState","state","setState","handleChange","target","value","prevState","reset","onFindName","filter","contact","className","onSubmit","evt","preventDefault","length","toast","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","error","htmlFor","type","onChange","defaultProps","connect","status","phonebook","dispatch","phonebookActions","findName","ContactList","removeContactId","map","onClick","filterContacts","toLowerCase","startsWith","Filter","onFilter","e","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebookReducer","devTools","process","persistor","persistStore","ReactDOM","render","loading","document","querySelector"],"mappings":"kRA8Cc,GACVA,WAbeC,YAAa,iBAAiB,SAACC,EAAMC,GACpD,MAAO,CACHC,QAAQ,CACJC,GAAGC,cACHJ,KAAKA,EACLC,MAAMA,OASdI,cALkBN,YAAa,oBAM/BO,aALiBP,YAAa,2BCjC5BQ,EAAgB,CAClBP,KAAK,GACLC,MAAM,IAGJO,EAAc,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAAmB,EAEtBC,mBAAS,eAAIJ,IAFS,mBAEzCK,EAFyC,KAElCC,EAFkC,KAGzCb,EAAeY,EAAfZ,KAAMC,EAASW,EAATX,MAGPa,EAAe,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXf,EAAgBe,EAAhBf,KAAMgB,EAAUD,EAAVC,MAEdH,GAAS,SAAAI,GAAS,kCAASA,GAAT,kBAAqBjB,EAAMgB,QAwC3CE,EAAQ,WACVL,EAAS,eAAKN,KAGZY,EAAa,SAACnB,GAChB,OAAOS,EAASW,QAAO,SAAAC,GAAO,OAAIA,EAAQrB,OAASA,MAGvD,OACI,qCACA,uBAAMsB,UAAU,YAAYC,SA/CX,SAAAC,GAIjB,OAHAA,EAAIC,iBAGAzB,GAASC,EAakB,IAA5BkB,EAAWnB,GAAM0B,QAChBC,IAAMC,KAAK5B,EAAO,2BAA4B,CAC1C6B,SAAU,WACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,KAEP,IAIX1B,EAAaV,EAAMC,QAEnBiB,MA5BIS,IAAMU,MAAM,gCAAiC,CACzCR,SAAU,WACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,KAEP,IAiCX,UACI,uBAAOE,QAAQ,SAAf,kBAAoC,uBACpC,uBAAOC,KAAK,OAAOvC,KAAK,OAAOG,GAAG,SAASa,MAAOhB,EAAMwC,SAAU1B,IAClE,uBACA,uBAAOwB,QAAQ,UAAf,oBAAuC,uBACvC,uBAAOC,KAAK,MAAMvC,KAAK,QAAQG,GAAG,UAAUa,MAAOf,EAAOuC,SAAU1B,IACpE,uBACA,uBACA,wBAAQyB,KAAK,SAAb,4BAEJ,cAAC,IAAD,QAOR/B,EAAYiC,aAAe,CACvBhC,SAAS,GACTC,aAAa,cAQjB,IASegC,eATS,SAAAC,GAAM,MAAK,CAC/BlC,SAASkC,EAAOC,UAAUnC,aAGH,SAAAoC,GAAQ,MAAK,CAEpCnC,aAAc,SAACV,EAAMC,GAAP,OAAiB4C,EAASC,EAAiBhD,WAAWE,EAAMC,KAC1EkB,WAAY,SAAAnB,GAAI,OAAI6C,EAASC,EAAiBC,SAAS/C,QAE5C0C,CAA6ClC,GCzGtDwC,EAAc,SAAC,GAAmC,IAAjCvC,EAAgC,EAAhCA,SAAUwC,EAAsB,EAAtBA,gBAE7B,OACQ,6BAEQxC,EAASyC,KAAI,gBAAE/C,EAAF,EAAEA,GAAIH,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,MAAZ,OACT,+BAAa,qCAAQD,EAAR,KAAgBC,EAAhB,OAA8B,wBAAQkD,QAAS,WAAKF,EAAgB9C,IAAtC,oBAA3C,MAASA,SAOjC6C,EAAYP,aAAe,CACvBhC,SAAS,GACTwC,gBAAgB,cAOpB,IAAMG,EAAiB,SAAChC,EAAQX,GAC5B,OAAOA,EAASW,QAAO,SAAAC,GAAO,OAAIA,EAAQrB,KAAKqD,cAAcC,WAAWlC,EAAOiC,mBAapEX,eAVS,SAAA9B,GAAS,IAAD,EACDA,EAAMgC,UAA1BxB,EADqB,EACrBA,OAAQX,EADa,EACbA,SAEf,MAAO,CAAEA,SAAU2C,EAAehC,EAAQX,OAGnB,SAAAoC,GAAQ,MAAI,CACnCI,gBAAiB,SAAA9C,GAAE,OAAI0C,EAASC,EAAiBzC,cAAcF,QAGpDuC,CAA6CM,GCnCtDO,EAAS,SAAC,GAAwB,IAAvBnC,EAAsB,EAAtBA,OAAQoC,EAAc,EAAdA,SAMrB,OACI,uBAAMjC,SALW,SAAAC,GACjBA,EAAIC,kBAIJ,UACI,uBAAOa,QAAQ,WAAf,mCAAuD,uBACvD,uBAAOC,KAAK,OAAOvC,KAAK,SAASG,GAAG,WAAWa,MAAOI,EAASoB,SAAUgB,QAKrFD,EAAOd,aAAe,CAClBrB,OAAO,GACPoC,SAAS,cAOb,IAQed,eARS,SAAA9B,GAAK,MAAK,CAC9BQ,OAAOR,EAAMgC,UAAUxB,WAGC,SAAAyB,GAAQ,MAAI,CACpCW,SAAU,SAAAC,GAAC,OAAIZ,EAASC,EAAiBxC,aAAamD,EAAE1C,OAAOC,YAGpD0B,CAA6Ca,GC9B7C,SAASG,IACpB,OACI,qCACI,2CACA,cAAC,EAAD,IAEA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,O,qBCaNjD,EAAWkD,YAAc,IAAD,mBACzBC,EAAQ9D,YAAa,SAACc,EAAD,OAASV,EAAT,EAASA,QAAT,4BAA0BU,GAA1B,CAAiCV,OAD7B,cAEzB0D,EAAQvD,eAAgB,SAACO,EAAD,OAASV,EAAT,EAASA,QAAT,OAAsBU,EAAMQ,QAAQ,qBAAEjB,KAAeD,QAFpD,IAKxBkB,EAASuC,YAAc,GAAD,eACvBC,EAAQtD,cAAe,SAACuD,EAAD,YAAK3D,YAGlB4D,cAAgB,CAC3BrD,WACAW,W,yCClBE2C,EAAU,sBAAOC,YAAqB,CACxCC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAFhD,CAIVC,MAEAC,EAAgB,CAClBC,IAAK,YACLC,YACAC,UAAU,CAAC,WAITC,EAAQC,YAAe,CAIzBC,QAAQ,CACJpC,UAAUqC,YAAeP,EAAeQ,IAE5CnB,aACAoB,UAASC,IAKE,GAACN,QAAOO,UAFLC,YAAaR,I,QCvC/BS,IAASC,OACL,cAAC,IAAD,CAAUV,MAAOA,EAAMA,MAAvB,SACI,cAAC,IAAD,CAAaW,QAAS,KAAMJ,UAAWP,EAAMO,UAA7C,SACI,cAAC3B,EAAD,QAGZgC,SAASC,cAAc,Y","file":"static/js/main.bd415dd7.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport types from './phonebook-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n\r\n// const addContact = data =>({\r\n//     type: types.ADD,\r\n//     payload: data\r\n// })\r\n\r\n// const deleteContact = id => ({\r\n//     type: types.DELETE,\r\n//     payload: id\r\n// })\r\n\r\n// const changeFilter = value => ({\r\n//     type:types.CHANGE_FILTER,\r\n//     payload:value\r\n// })\r\n\r\n/*\r\nconst addContact = createAction(types.ADD, (name, phone)=>{\r\n    return {\r\n        payload:{\r\n            id:uuidv4(),\r\n            name:name,\r\n            phone:phone\r\n        }\r\n    }\r\n});\r\nconst deleteContact = createAction(types.DELETE)\r\nconst changeFilter = createAction(types.CHANGE_FILTER)*/\r\n\r\nconst addContact = createAction('phonebook/add', (name, phone)=>{\r\n    return {\r\n        payload:{\r\n            id:uuidv4(),\r\n            name:name,\r\n            phone:phone\r\n        }\r\n    }\r\n});\r\nconst deleteContact = createAction('phonebook/delete')\r\nconst changeFilter = createAction('phonebook/changeFilter')\r\n\r\nexport default{\r\n    addContact,\r\n    deleteContact,\r\n    changeFilter\r\n}","import React, { useState } from 'react';\r\nimport './ContactForm.css';\r\n// import { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport phonebookActions from './../../redux/phonebook/phonebook-actions';\r\n\r\n\r\nconst INITIAL_STATE = {\r\n    name:\"\",\r\n    phone:\"\"\r\n}\r\n\r\nconst ContactForm = ({ contacts, onAddContact }) => {\r\n\r\n    const [state, setState] = useState({...INITIAL_STATE})\r\n    const {name, phone} = state;\r\n\r\n\r\n    const handleChange = ({target}) => {\r\n        const { name, value } = target;\r\n        \r\n        setState(prevState => ({...prevState, [name]:value}))\r\n    }\r\n\r\n    const handleSubmit = evt =>{\r\n        evt.preventDefault();\r\n\r\n\r\n        if(!name || !phone){\r\n            toast.error(\"Name or phone filed is empty.\", {\r\n                position: \"top-left\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            return false; \r\n        }\r\n\r\n        if(onFindName(name).length !== 0){\r\n            toast.warn(name + ' is already in contacts.', {\r\n                position: \"top-left\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            return false;\r\n        }\r\n\r\n        // onAddContact({id:uuidv4(), name:name, phone:phone});\r\n        onAddContact(name, phone);\r\n\r\n        reset();\r\n    }\r\n\r\n\r\n    const reset = () => {\r\n        setState({ ...INITIAL_STATE });\r\n    };\r\n\r\n    const onFindName = (name) =>{\r\n        return contacts.filter(contact => contact.name === name)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form className=\"phonebook\" onSubmit={handleSubmit}>\r\n            <label htmlFor=\"name_1\">Name</label><br/>\r\n            <input type=\"text\" name=\"name\" id=\"name_1\" value={name} onChange={handleChange}/>\r\n            <br/>\r\n            <label htmlFor=\"phone_1\">Number</label><br/>\r\n            <input type=\"tel\" name=\"phone\" id=\"phone_1\" value={phone} onChange={handleChange}/>\r\n            <br/>\r\n            <br/>\r\n            <button type=\"submit\">Add contact</button>\r\n        </form>\r\n        <ToastContainer />\r\n        </>\r\n\r\n    );\r\n    \r\n}\r\n\r\nContactForm.defaultProps = {\r\n    contacts:[],\r\n    onAddContact:()=>{}\r\n}\r\n\r\nContactForm.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onAddContact:PropTypes.func\r\n}\r\n \r\nconst mapStateToProps = status => ({\r\n    contacts:status.phonebook.contacts\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    // onAddContact: data => dispatch(phonebookActions.addContact(data)),\r\n    onAddContact: (name, phone) => dispatch(phonebookActions.addContact(name, phone)),\r\n    onFindName: name => dispatch(phonebookActions.findName(name))\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm)","import React from 'react';\r\nimport  PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport phonebookActions from './../../redux/phonebook/phonebook-actions';\r\n\r\nconst ContactList = ({ contacts, removeContactId }) => {\r\n\r\n    return(\r\n            <ul>\r\n                {\r\n                    contacts.map(({id, name, phone}) => (\r\n                        <li key={id}><span> {name}: {phone} </span><button onClick={()=>{removeContactId(id)}}>Delete</button> </li>\r\n                    ))\r\n                }\r\n            </ul>\r\n    )\r\n}\r\n\r\nContactList.defaultProps = {\r\n    contacts:[],\r\n    removeContactId:() =>{}\r\n}\r\nContactList.propTypes = {\r\n    contacts:PropTypes.array.isRequired,\r\n    removeContactId:PropTypes.func\r\n}\r\n\r\nconst filterContacts = (filter, contacts)=>{\r\n    return contacts.filter(contact => contact.name.toLowerCase().startsWith(filter.toLowerCase()))\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    const {filter, contacts} = state.phonebook;\r\n\r\n    return { contacts: filterContacts(filter, contacts)}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    removeContactId: id => dispatch(phonebookActions.deleteContact(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList)","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport phonebookActions from './../../redux/phonebook/phonebook-actions';\r\n\r\n\r\nconst Filter = ({filter, onFilter}) => {\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor=\"filter_1\">Find contacts by name</label><br/>\r\n            <input type=\"text\" name=\"filter\" id=\"filter_1\" value={filter}  onChange={onFilter} />\r\n        </form>\r\n    );\r\n}\r\n\r\nFilter.defaultProps = {\r\n    filter:'',\r\n    onFilter:()=>{}\r\n}\r\nFilter.propTypes = {\r\n    filter:PropTypes.string.isRequired,\r\n    onFilter:PropTypes.func\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    filter:state.phonebook.filter\r\n});\r\n\r\nconst  mapDispatchToprops = dispatch =>({\r\n    onFilter: e => dispatch(phonebookActions.changeFilter(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToprops)(Filter)","// import React, { useMemo, useState } from 'react';\nimport ContactForm from './ContactForm/ContactForm'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\n\n// import useLocalStorage from './../hooks/useLocalStorage';\n\n\nexport default function App(){\n    return (\n        <>   \n            <h2>Phonebook</h2>\n            <ContactForm />\n\n            <h2>Contacts</h2>\n            <Filter/>\n            <ContactList />  \n        </>\n    );\n}\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\n// import types from './../phonebook/phonebook-types';\r\nimport actions from './phonebook-actions';\r\n\r\n// const contacts = (state = [], {type, payload}) =>{\r\n//     switch(type){\r\n//         case types.ADD:\r\n//             return [...state, payload]\r\n        \r\n//         case types.DELETE:\r\n//             return state.filter( ({id}) => id !== payload)\r\n        \r\n//         default:\r\n//             return state\r\n//     }\r\n    \r\n// }\r\n\r\n// const filter = (state = '', {type, payload}) =>{\r\n//     switch(type){\r\n//         case types.CHANGE_FILTER:\r\n//             return payload;\r\n\r\n//         default:\r\n//             return state;       \r\n//     }\r\n// }\r\n\r\nconst contacts = createReducer([], {\r\n    [actions.addContact]: (state, {payload}) => [...state, payload],\r\n    [actions.deleteContact]: (state, {payload}) => state.filter( ({id}) => id !== payload)\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, {payload}) => payload\r\n})\r\n\r\nexport default combineReducers({\r\n    contacts,\r\n    filter\r\n})","import { combineReducers, createStore } from 'redux'\r\n// import { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport phonebookReducer from './../redux/phonebook/phonebook-reducer'\r\nimport logger from 'redux-logger'\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER\r\n  } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\n// const rootPhonebookReducer = combineReducers({\r\n//     phonebook:phonebookReducer\r\n// })\r\n// const store = createStore(rootPhonebookReducer, composeWithDevTools());\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }\r\n  }), logger]\r\n\r\nconst persistConfig = {\r\n    key: 'phonebook',\r\n    storage,\r\n    blacklist:['filter']\r\n  }\r\n   \r\n\r\nconst store = configureStore({\r\n    // reducer:{\r\n    //     phonebook:phonebookReducer\r\n    // },\r\n    reducer:{\r\n        phonebook:persistReducer(persistConfig, phonebookReducer)\r\n    },\r\n    middleware,\r\n    devTools:process.env.NODE_ENV === 'development'\r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\nexport default {store, persistor};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n    <Provider store={store.store}>\n        <PersistGate loading={null} persistor={store.persistor}>\n            <App/>\n        </PersistGate>\n    </Provider>, \ndocument.querySelector('#root'));\n"],"sourceRoot":""}